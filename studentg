# Student Grade Management System

students = []

def addstudent():
    name = input("Enter name: ").strip()
    while not name:
        print("Name cannot be empty.")
        name = input("Enter name: ").strip()
    
    try:
        rollno = int(input("Enter roll number: "))
    except ValueError:
        print("Roll number must be a number!")
        return
    
    # Check for duplicate roll number
    for s in students:
        if s['rollno'] == rollno:
            print("Roll number already exists.")
            return
    
    # Fixed marks input section
    try:
        marksinput = input("Enter marks for 3 subjects separated by space: ")
        marks = list(map(int, marksinput.split()))
        
        if len(marks) != 3:
            print("You must enter exactly 3 marks.")
            return
        
        for m in marks:
            if m < 0 or m > 100:
                print("Marks must be between 0 and 100.")
                return
    except ValueError:
        print("Invalid marks input! Please enter numbers only.")
        return
    except Exception as e:
        print(f"Error: {e}")
        return
    
    students.append({
        "name": name, 
        "rollno": rollno, 
        "marks": marks, 
        "average": None, 
        "grade": None
    })
    print("Student added successfully!")

def liststudents():
    
    if not students:
        print("No students in the system")
        return
    
    for idx, s in enumerate(students, 1):
        avg = s['average'] if s['average'] is not None else "NA"
        grade = s['grade'] if s['grade'] is not None else "NA"
        marks_str = ', '.join(map(str, s['marks']))
        print(f"{idx}. {s['name']} Roll {s['rollno']} - Marks: {marks_str} - Avg: {avg} - Grade: {grade}")

def searchstudent():
    query = input("Enter name or roll number to search: ").strip().lower()
    found = False
    
    for s in students:
        if query == str(s['rollno']).lower() or query in s['name'].lower():
            avg = s['average'] if s['average'] is not None else "NA"
            grade = s['grade'] if s['grade'] is not None else "NA"
            marks_str = ', '.join(map(str, s['marks']))
            print(f"{s['name']} Roll {s['rollno']} - Marks: {marks_str} - Avg: {avg} - Grade: {grade}")
            found = True
    
    if not found:
        print("No students found")

def updatemarks():
    if not students:
        print("No students in the system")
        return
    
    try:
        idx = int(input("Enter student index to update marks: ")) - 1
        if not (0 <= idx < len(students)):
            print("Invalid index!")
            return
        
        marksinput = input("Enter new marks (3 subjects separated by space): ")
        marks = list(map(int, marksinput.split()))
        
        if len(marks) != 3:
            print("You must enter exactly 3 marks.")
            return
        
        for m in marks:
            if m < 0 or m > 100:
                print("Marks must be between 0 and 100.")
                return
        
        students[idx]["marks"] = marks
        students[idx]["average"] = None
        students[idx]["grade"] = None
        print("Marks updated successfully!")
    except ValueError:
        print("Error: Please enter valid numbers.")
    except Exception as e:
        print(f"Error: {e}")

def deletestudent():
    if not students:
        print("No students in the system")
        return
    
    try:
        idx = int(input("Enter student index to delete: ")) - 1
        if not (0 <= idx < len(students)):
            print("Invalid index!")
            return
        
        deleted = students.pop(idx)
        print(f"Student {deleted['name']} deleted successfully!")
    except ValueError:
        print("Please enter a valid number.")
    except Exception as e:
        print(f"Error: {e}")

def calculategrade():
    """Calculate average and grade for a student"""
    if not students:
        print("No students in the system")
        return
    
    try:
        idx = int(input("Enter student index to calculate grade: ")) - 1
        if not (0 <= idx < len(students)):
            print("Invalid index!")
            return
        
        avg = sum(students[idx]['marks']) / 3
        students[idx]['average'] = round(avg, 2)
        
        # Grade calculation as per PDF
        if avg >= 90:
            grade = "A"
        elif avg >= 80:
            grade = "A"
        elif avg >= 70:
            grade = "B"
        elif avg >= 60:
            grade = "C"
        else:
            grade = "D"
        
        students[idx]['grade'] = grade
        print(f"Grade calculated: {grade} (Average: {students[idx]['average']})")
    except ValueError:
        print("Please enter a valid number.")
    except Exception as e:
        print(f"Error: {e}")

def rankstudents():
    ranked = [s for s in students if s['average'] is not None]
    
    if not ranked:
        print("No students to rank. Please calculate grades first.")
        return
    
    ranked.sort(key=lambda x: x['average'], reverse=True)
    
    print("\nStudent Rankings:")
    for idx, s in enumerate(ranked, 1):
        print(f"{idx}. {s['name']} - Avg: {s['average']} - Grade: {s['grade']}")

def statistics():
    """Display class statistics"""
    avgs = [s['average'] for s in students if s['average'] is not None]
    
    if not avgs:
        print("No statistics to show. Please calculate grades first.")
        return
    
    highest = max(avgs)
    lowest = min(avgs)
    
    # Find students with highest and lowest averages
    highest_student = next(s for s in students if s['average'] == highest)
    lowest_student = next(s for s in students if s['average'] == lowest)
    
    grades = [s['grade'] for s in students if s['grade'] is not None]
    
    print("\nClass Statistics:")
    print(f"Class average: {round(sum(avgs)/len(avgs), 2)}")
    print(f"Highest average: {highest} - {highest_student['name']}")
    print(f"Lowest average: {lowest} - {lowest_student['name']}")
    
    # Grade distribution
    grade_count = {}
    for grade in ['A', 'B', 'C', 'D']:
        count = grades.count(grade)
        if count > 0:
            grade_count[grade] = count
    
    print(f"Grade distribution: {grade_count}")

def menu():
    """Main menu"""
    print("=" * 50)
    print("Welcome to Student Grade Management System!")
    print("=" * 50)
    
    while True:
        print("\n" + "=" * 50)
        print("MENU OPTIONS:")
        print("[a] Add Student")
        print("[l] List All Students")
        print("[s] Search Student")
        print("[u] Update Student Marks")
        print("[d] Delete Student")
        print("[c] Calculate Grade")
        print("[r] Rank Students")
        print("[t] Statistics")
        print("[q] Quit")
        print("=" * 50)
        
        choice = input("Enter your choice: ").lower().strip()
        
        if choice == "a":
            addstudent()
        elif choice == "l":
            liststudents()
        elif choice == "s":
            searchstudent()
        elif choice == "u":
            updatemarks()
        elif choice == "d":
            deletestudent()
        elif choice == "c":
            calculategrade()
        elif choice == "r":
            rankstudents()
        elif choice == "t":
            statistics()
        elif choice == "q":
            print("\nThank you for using Student Grade Management System!")
            print("Goodbye!")
            break
        else:
            print("Invalid option! Please try again.")

# Run the program
if __name__ == "__main__":
    menu()
